// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DINMESSAGE_DINMESSAGE_H_
#define FLATBUFFERS_GENERATED_DINMESSAGE_DINMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

namespace DINMessage {

struct Hyperparameters;

struct Layer;

struct Message;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Hyperparameters FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t communication_rounds_;
  int32_t local_iter_num_;
  int32_t train_batch_size_;
  int32_t test_batch_size_;
  int32_t predict_batch_size_;
  int32_t predict_user_num_;
  int32_t predict_ads_num_;
  float learning_rate_;
  float decay_rate_;
  int32_t embedding_dim_;

 public:
  Hyperparameters() {
    memset(static_cast<void *>(this), 0, sizeof(Hyperparameters));
  }
  Hyperparameters(int32_t _communication_rounds, int32_t _local_iter_num, int32_t _train_batch_size, int32_t _test_batch_size, int32_t _predict_batch_size, int32_t _predict_user_num, int32_t _predict_ads_num, float _learning_rate, float _decay_rate, int32_t _embedding_dim)
      : communication_rounds_(flatbuffers::EndianScalar(_communication_rounds)),
        local_iter_num_(flatbuffers::EndianScalar(_local_iter_num)),
        train_batch_size_(flatbuffers::EndianScalar(_train_batch_size)),
        test_batch_size_(flatbuffers::EndianScalar(_test_batch_size)),
        predict_batch_size_(flatbuffers::EndianScalar(_predict_batch_size)),
        predict_user_num_(flatbuffers::EndianScalar(_predict_user_num)),
        predict_ads_num_(flatbuffers::EndianScalar(_predict_ads_num)),
        learning_rate_(flatbuffers::EndianScalar(_learning_rate)),
        decay_rate_(flatbuffers::EndianScalar(_decay_rate)),
        embedding_dim_(flatbuffers::EndianScalar(_embedding_dim)) {
  }
  int32_t communication_rounds() const {
    return flatbuffers::EndianScalar(communication_rounds_);
  }
  int32_t local_iter_num() const {
    return flatbuffers::EndianScalar(local_iter_num_);
  }
  int32_t train_batch_size() const {
    return flatbuffers::EndianScalar(train_batch_size_);
  }
  int32_t test_batch_size() const {
    return flatbuffers::EndianScalar(test_batch_size_);
  }
  int32_t predict_batch_size() const {
    return flatbuffers::EndianScalar(predict_batch_size_);
  }
  int32_t predict_user_num() const {
    return flatbuffers::EndianScalar(predict_user_num_);
  }
  int32_t predict_ads_num() const {
    return flatbuffers::EndianScalar(predict_ads_num_);
  }
  float learning_rate() const {
    return flatbuffers::EndianScalar(learning_rate_);
  }
  float decay_rate() const {
    return flatbuffers::EndianScalar(decay_rate_);
  }
  int32_t embedding_dim() const {
    return flatbuffers::EndianScalar(embedding_dim_);
  }
};
FLATBUFFERS_STRUCT_END(Hyperparameters, 40);

struct Layer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DIMENSION = 6,
    VT_BYTE_ARRAY = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<int32_t> *dimension() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_DIMENSION);
  }
  const flatbuffers::Vector<uint8_t> *byte_array() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BYTE_ARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DIMENSION) &&
           verifier.VerifyVector(dimension()) &&
           VerifyOffset(verifier, VT_BYTE_ARRAY) &&
           verifier.VerifyVector(byte_array()) &&
           verifier.EndTable();
  }
};

struct LayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Layer::VT_NAME, name);
  }
  void add_dimension(flatbuffers::Offset<flatbuffers::Vector<int32_t>> dimension) {
    fbb_.AddOffset(Layer::VT_DIMENSION, dimension);
  }
  void add_byte_array(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> byte_array) {
    fbb_.AddOffset(Layer::VT_BYTE_ARRAY, byte_array);
  }
  explicit LayerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LayerBuilder &operator=(const LayerBuilder &);
  flatbuffers::Offset<Layer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Layer>(end);
    return o;
  }
};

inline flatbuffers::Offset<Layer> CreateLayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> dimension = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> byte_array = 0) {
  LayerBuilder builder_(_fbb);
  builder_.add_byte_array(byte_array);
  builder_.add_dimension(dimension);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Layer> CreateLayerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<int32_t> *dimension = nullptr,
    const std::vector<uint8_t> *byte_array = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto dimension__ = dimension ? _fbb.CreateVector<int32_t>(*dimension) : 0;
  auto byte_array__ = byte_array ? _fbb.CreateVector<uint8_t>(*byte_array) : 0;
  return DINMessage::CreateLayer(
      _fbb,
      name__,
      dimension__,
      byte_array__);
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HYPERPARAMETERS = 4,
    VT_USER_IDS = 6,
    VT_ITEM_IDS = 8,
    VT_CATE_IDS = 10,
    VT_USER_IDS_APPEAR_TIMES = 12,
    VT_ITEM_IDS_APPEAR_TIMES = 14,
    VT_CATE_IDS_APPEAR_TIMES = 16,
    VT_CLIENT_ID = 18,
    VT_CLIENT_TRAIN_SET_SIZE = 20,
    VT_MODEL_TIMESTAMP = 22,
    VT_MODEL_PARAMETERS = 24
  };
  const Hyperparameters *hyperparameters() const {
    return GetStruct<const Hyperparameters *>(VT_HYPERPARAMETERS);
  }
  const flatbuffers::Vector<int32_t> *user_IDs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_USER_IDS);
  }
  const flatbuffers::Vector<int32_t> *item_IDs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_ITEM_IDS);
  }
  const flatbuffers::Vector<int32_t> *cate_IDs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_CATE_IDS);
  }
  const flatbuffers::Vector<int32_t> *user_IDs_appear_times() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_USER_IDS_APPEAR_TIMES);
  }
  const flatbuffers::Vector<int32_t> *item_IDs_appear_times() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_ITEM_IDS_APPEAR_TIMES);
  }
  const flatbuffers::Vector<int32_t> *cate_IDs_appear_times() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_CATE_IDS_APPEAR_TIMES);
  }
  int32_t client_ID() const {
    return GetField<int32_t>(VT_CLIENT_ID, 0);
  }
  int32_t client_train_set_size() const {
    return GetField<int32_t>(VT_CLIENT_TRAIN_SET_SIZE, 0);
  }
  const flatbuffers::String *model_timestamp() const {
    return GetPointer<const flatbuffers::String *>(VT_MODEL_TIMESTAMP);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Layer>> *model_parameters() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Layer>> *>(VT_MODEL_PARAMETERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Hyperparameters>(verifier, VT_HYPERPARAMETERS) &&
           VerifyOffset(verifier, VT_USER_IDS) &&
           verifier.VerifyVector(user_IDs()) &&
           VerifyOffset(verifier, VT_ITEM_IDS) &&
           verifier.VerifyVector(item_IDs()) &&
           VerifyOffset(verifier, VT_CATE_IDS) &&
           verifier.VerifyVector(cate_IDs()) &&
           VerifyOffset(verifier, VT_USER_IDS_APPEAR_TIMES) &&
           verifier.VerifyVector(user_IDs_appear_times()) &&
           VerifyOffset(verifier, VT_ITEM_IDS_APPEAR_TIMES) &&
           verifier.VerifyVector(item_IDs_appear_times()) &&
           VerifyOffset(verifier, VT_CATE_IDS_APPEAR_TIMES) &&
           verifier.VerifyVector(cate_IDs_appear_times()) &&
           VerifyField<int32_t>(verifier, VT_CLIENT_ID) &&
           VerifyField<int32_t>(verifier, VT_CLIENT_TRAIN_SET_SIZE) &&
           VerifyOffset(verifier, VT_MODEL_TIMESTAMP) &&
           verifier.VerifyString(model_timestamp()) &&
           VerifyOffset(verifier, VT_MODEL_PARAMETERS) &&
           verifier.VerifyVector(model_parameters()) &&
           verifier.VerifyVectorOfTables(model_parameters()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hyperparameters(const Hyperparameters *hyperparameters) {
    fbb_.AddStruct(Message::VT_HYPERPARAMETERS, hyperparameters);
  }
  void add_user_IDs(flatbuffers::Offset<flatbuffers::Vector<int32_t>> user_IDs) {
    fbb_.AddOffset(Message::VT_USER_IDS, user_IDs);
  }
  void add_item_IDs(flatbuffers::Offset<flatbuffers::Vector<int32_t>> item_IDs) {
    fbb_.AddOffset(Message::VT_ITEM_IDS, item_IDs);
  }
  void add_cate_IDs(flatbuffers::Offset<flatbuffers::Vector<int32_t>> cate_IDs) {
    fbb_.AddOffset(Message::VT_CATE_IDS, cate_IDs);
  }
  void add_user_IDs_appear_times(flatbuffers::Offset<flatbuffers::Vector<int32_t>> user_IDs_appear_times) {
    fbb_.AddOffset(Message::VT_USER_IDS_APPEAR_TIMES, user_IDs_appear_times);
  }
  void add_item_IDs_appear_times(flatbuffers::Offset<flatbuffers::Vector<int32_t>> item_IDs_appear_times) {
    fbb_.AddOffset(Message::VT_ITEM_IDS_APPEAR_TIMES, item_IDs_appear_times);
  }
  void add_cate_IDs_appear_times(flatbuffers::Offset<flatbuffers::Vector<int32_t>> cate_IDs_appear_times) {
    fbb_.AddOffset(Message::VT_CATE_IDS_APPEAR_TIMES, cate_IDs_appear_times);
  }
  void add_client_ID(int32_t client_ID) {
    fbb_.AddElement<int32_t>(Message::VT_CLIENT_ID, client_ID, 0);
  }
  void add_client_train_set_size(int32_t client_train_set_size) {
    fbb_.AddElement<int32_t>(Message::VT_CLIENT_TRAIN_SET_SIZE, client_train_set_size, 0);
  }
  void add_model_timestamp(flatbuffers::Offset<flatbuffers::String> model_timestamp) {
    fbb_.AddOffset(Message::VT_MODEL_TIMESTAMP, model_timestamp);
  }
  void add_model_parameters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Layer>>> model_parameters) {
    fbb_.AddOffset(Message::VT_MODEL_PARAMETERS, model_parameters);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Hyperparameters *hyperparameters = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> user_IDs = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> item_IDs = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> cate_IDs = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> user_IDs_appear_times = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> item_IDs_appear_times = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> cate_IDs_appear_times = 0,
    int32_t client_ID = 0,
    int32_t client_train_set_size = 0,
    flatbuffers::Offset<flatbuffers::String> model_timestamp = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Layer>>> model_parameters = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_model_parameters(model_parameters);
  builder_.add_model_timestamp(model_timestamp);
  builder_.add_client_train_set_size(client_train_set_size);
  builder_.add_client_ID(client_ID);
  builder_.add_cate_IDs_appear_times(cate_IDs_appear_times);
  builder_.add_item_IDs_appear_times(item_IDs_appear_times);
  builder_.add_user_IDs_appear_times(user_IDs_appear_times);
  builder_.add_cate_IDs(cate_IDs);
  builder_.add_item_IDs(item_IDs);
  builder_.add_user_IDs(user_IDs);
  builder_.add_hyperparameters(hyperparameters);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Hyperparameters *hyperparameters = 0,
    const std::vector<int32_t> *user_IDs = nullptr,
    const std::vector<int32_t> *item_IDs = nullptr,
    const std::vector<int32_t> *cate_IDs = nullptr,
    const std::vector<int32_t> *user_IDs_appear_times = nullptr,
    const std::vector<int32_t> *item_IDs_appear_times = nullptr,
    const std::vector<int32_t> *cate_IDs_appear_times = nullptr,
    int32_t client_ID = 0,
    int32_t client_train_set_size = 0,
    const char *model_timestamp = nullptr,
    const std::vector<flatbuffers::Offset<Layer>> *model_parameters = nullptr) {
  auto user_IDs__ = user_IDs ? _fbb.CreateVector<int32_t>(*user_IDs) : 0;
  auto item_IDs__ = item_IDs ? _fbb.CreateVector<int32_t>(*item_IDs) : 0;
  auto cate_IDs__ = cate_IDs ? _fbb.CreateVector<int32_t>(*cate_IDs) : 0;
  auto user_IDs_appear_times__ = user_IDs_appear_times ? _fbb.CreateVector<int32_t>(*user_IDs_appear_times) : 0;
  auto item_IDs_appear_times__ = item_IDs_appear_times ? _fbb.CreateVector<int32_t>(*item_IDs_appear_times) : 0;
  auto cate_IDs_appear_times__ = cate_IDs_appear_times ? _fbb.CreateVector<int32_t>(*cate_IDs_appear_times) : 0;
  auto model_timestamp__ = model_timestamp ? _fbb.CreateString(model_timestamp) : 0;
  auto model_parameters__ = model_parameters ? _fbb.CreateVector<flatbuffers::Offset<Layer>>(*model_parameters) : 0;
  return DINMessage::CreateMessage(
      _fbb,
      hyperparameters,
      user_IDs__,
      item_IDs__,
      cate_IDs__,
      user_IDs_appear_times__,
      item_IDs_appear_times__,
      cate_IDs_appear_times__,
      client_ID,
      client_train_set_size,
      model_timestamp__,
      model_parameters__);
}

inline const DINMessage::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<DINMessage::Message>(buf);
}

inline const DINMessage::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DINMessage::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DINMessage::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DINMessage::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DINMessage::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DINMessage::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DINMessage

#endif  // FLATBUFFERS_GENERATED_DINMESSAGE_DINMESSAGE_H_
